# Run `travis lint` when changing this file to avoid breaking the build.

# We need a full VM so that testcontainers can use Docker
# See https://docs.travis-ci.com/user/reference/overview/#for-a-particular-travisyml-configuration
arch: amd64           # arm64 is LXD containers which we can't use because we run Docker tests
os: linux             # required for arch different than amd64
dist: focal           # newest available distribution

language: java
# Intentionally don't use "jdk" key as it is coupled to jdk.java.net availability.
addons:
  apt:
    update: true

# Don't do a shallow clone to allow license plugin to correctly read git history.
git:
  depth: false

cache:
  directories:
  # zipkin-lens gets dependencies via NPM
  - $HOME/.npm
  - $HOME/.m2

services:
  - docker

before_install:
  # Ensure Docker buildx is available and can build multi-architecture
  - |
    # Enable experimental features on the server (multi-arch)
    echo '{"experimental":true}' | sudo tee /etc/docker/daemon.json
    sudo service docker restart
    # Enable experimental client features (eg docker buildx)
    mkdir -p $HOME/.docker && echo '{"experimental":"enabled"}' > $HOME/.docker/config.json
  - |
    # Add buildx plugin
    BUILDX_VERSION=0.4.2
    BUILDX_URL=https://github.com/docker/buildx/releases/download/v${BUILDX_VERSION}/buildx-v${BUILDX_VERSION}.linux-${TRAVIS_CPU_ARCH}
    mkdir -p $HOME/.docker/cli-plugins
    ( cd $HOME/.docker/cli-plugins && wget -qO- $BUILDX_URL > docker-buildx && chmod 755 docker-buildx)
    docker version
  - |
    # Enable execution of different multi-architecture containers by QEMU and binfmt_misc
    # See https://github.com/multiarch/qemu-user-static
    if [ "$(uname -m)" = "x86_64" ]; then
      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    fi
    docker buildx create --name builder --use
  - |
    # Use JDK 11, so we can release Java 6 bytecode
    OPENJDK_VERSION=11
    sudo apt-get -y install openjdk-${OPENJDK_VERSION}-jdk
    export JAVA_HOME=/usr/lib/jvm/java-${OPENJDK_VERSION}-openjdk-${TRAVIS_CPU_ARCH}/
    ./mvnw -version
  - |
    # Quiet Maven invoker logs (Downloading... when running zipkin-server/src/it)
    echo "MAVEN_OPTS='-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'" > ~/.mavenrc

    # Disable testcontainers checks
    echo checks.disable=true > ~/.testcontainers.properties
  - |
    # Credentials entered into https://travis-ci.org/github/openzipkin/${REPO}/settings are access
    # controlled by branch (typically only master). Check to see if a well-known env is available
    # before attempting to log in.
    if [[ -n "$SONATYPE_USER" ]]; then
      # allocate commits to CI, not the owner of the deploy key
      git config user.name "zipkinci"
      git config user.email "zipkinci+zipkin-dev@googlegroups.com"

      # setup https authentication credentials, used by ./mvnw release:prepare
      git config credential.helper "store --file=.git/credentials"
      echo "https://$GH_TOKEN:@github.com" > .git/credentials

      # Log in to Docker Hub for releasing the image
      echo "$GH_TOKEN"| docker login ghcr.io -u "$GH_USER" --password-stdin
    fi

jobs:
  include:
    - name: default
      # Override default travis to use the maven wrapper
      # * Use the "release" profile as that ensures the core jar ends up JRE 1.6 compatible
      install: ./build-bin/go_offline
      script:
        - ./travis/publish.sh
        - |
          # If the above was a master build, it would have produced files we should push to Docker
          if [[ -f zipkin-exec.jar && -f zipkin-slim.jar ]]; then
            for target in $(docker/bin/targets-to-build); do
              RELEASE_FROM_CONTEXT=true docker/build_image ghcr.io/openzipkin/${target}:master push
            done
          fi
    # Only on master when not a release tag. See https://github.com/travis-ci/travis-conditions/
    - name: Republish zipkin-builder Docker image
      script: docker/build_image ghcr.io/openzipkin/zipkin-builder:latest push
      if: 'type IN (push) and branch = master'

branches:
  except:
    # Don't build release tags. This avoids publish conflicts because the version commit exists both on master and the release tag.
    # See https://github.com/travis-ci/travis-ci/issues/1532
    - /^[0-9]/
    # Don't build docker- tags with Travis. Docker Hub will pick up and run the build. docker- tags are used to recreate
    # docker images without rebuilding Zipkin so we don't need to run here.
    - /^docker-/

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/ead3c37d57527214e9f2
      - https://webhooks.gitter.im/e/9f1ee2f315d32956f8d6
    on_success: change
    on_failure: always


# Secure variables needed for release and publication
#
# When Travis, add to https://travis-ci.org/github/openzipkin/${REPO}/settings
#
# GH_TOKEN=XXX-https://github.com/settings/tokens-XXX
#   - makes release commits and tags, also writes to GHCR if Docker
#   - needs repo:status, public_repo and if Docker write:packages, delete:packages
#   - referenced in .settings.xml
#   - store like this: echo "https://$GH_TOKEN:@github.com" > .git/credentials
# GH_USER=user_that_created_GH_TOKEN
# SONATYPE_USER=your_sonatype_account_token
#   - used to publish to Maven Central via https://oss.sonatype.org/#stagingRepositories
#   - needs access to io.zipkin via https://issues.sonatype.org/browse/OSSRH-16669
#   - generate via https://oss.sonatype.org/#profile;User%20Token
#   - referenced in .settings.xml
# SONATYPE_PASSWORD=password_to_SONATYPE_USER
#   - referenced in .settings.xml
#
# Legacy secure variables are listed here:
env:
  global:
    # Ex. travis encrypt BINTRAY_USER=your_github_account
    - secure: "HvCQa4ZC7dexW8Iddbwtox4NY4yvoZtyYtkwlRG5Jh/h7MY1rFwghpqv42WunOnq+hgpVUWCJPM2sM1WY+JQQXSRFFfkUxSnVGfyqIRW3oHf6uK4Sw4rtX+Q/nthliu5QNqReMcg0+rr/UD2Nxat4QZqtnlVm2MQJNu8oxcm0hw="
    # Ex. travis encrypt BINTRAY_KEY=xxx-https://bintray.com/profile/edit-xxx
    - secure: "JC8sJHol2tGQT8QK00L8YQZjeo8gUnGS3x+kuYwF4UknJrJbz4+UU4uz2VDQJNdomjROngO6qLZrZmHOuV9l2LswZ7atlvMdEA16lxwKUQKK9xq4Qs5RxdZsz+zJwmEW5QcocjM1bRAQv+y4MPY9rHmoWEjtFQzfEovBpwFjafM="

    # To trigger Docker image publication, we need the Trigger Url from https://cloud.docker.com/u/openzipkin/repository/docker/openzipkin/zipkin/builds/edit
    # However, this is too big for travis encrypt. Instead, we decompose it into
    # two variables: https://cloud.docker.com/api/build/v1/source/${DOCKER_HUB_SERVICE_UUID}/trigger/${DOCKER_HUB_TRIGGER_UUID}/call/
    # Ex. travis encrypt DOCKER_HUB_SERVICE_UUID=https://cloud.docker.com/api/build/v1/source/XXX/trigger/...
    - secure: "iXCKU7rbBqBYZKCmF/VQNE/vFypM07+n4fv/RwwaL9XTrZJEF0TdLQDJzI5ekh/j7sWMlhEtGRvIKokNy3LRk+yTxFGSEOlqtsPv3QVVoO2z63DVEg5noeUteq3FgCKx/Dzj7eSukC13nE4acI7ShGCzzNn2ItYJiVT349YGqYM="
    # Ex. travis encrypt DOCKER_HUB_TRIGGER_UUID=https://cloud.docker.com/api/build/v1/source/.../trigger/XXX
    - secure: "HL9NVPuc9SZhWP2CSmv+LLc9y8rERr6alTuSTkURrbmemonmUH5aegVtegoeRus2Lxph4fW5NgIr44goquFNqe9905EAH5/P5E39P4z+tGfBAi3EvsuGn07oXaft96obCocc3TXMQND5bKJL46f0UGnQPiOffpXvM9/92qYYlRE="
