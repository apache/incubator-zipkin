/*
 * This file is generated by jOOQ.
 */
package zipkin2.storage.postgres.v1.internal.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import zipkin2.storage.postgres.v1.internal.generated.Keys;
import zipkin2.storage.postgres.v1.internal.generated.Zipkin;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZipkinSpans extends TableImpl<Record> {

    private static final long serialVersionUID = -1169385312;

    /**
     * The reference instance of <code>zipkin.zipkin_spans</code>
     */
    public static final ZipkinSpans ZIPKIN_SPANS = new ZipkinSpans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>zipkin.zipkin_spans.trace_id_high</code>.
     */
    public final TableField<Record, Long> TRACE_ID_HIGH = createField(DSL.name("trace_id_high"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>zipkin.zipkin_spans.trace_id</code>.
     */
    public final TableField<Record, Long> TRACE_ID = createField(DSL.name("trace_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>zipkin.zipkin_spans.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>zipkin.zipkin_spans.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>zipkin.zipkin_spans.remote_service_name</code>.
     */
    public final TableField<Record, String> REMOTE_SERVICE_NAME = createField(DSL.name("remote_service_name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>zipkin.zipkin_spans.parent_id</code>.
     */
    public final TableField<Record, Long> PARENT_ID = createField(DSL.name("parent_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>zipkin.zipkin_spans.debug</code>.
     */
    public final TableField<Record, Boolean> DEBUG = createField(DSL.name("debug"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>zipkin.zipkin_spans.start_ts</code>.
     */
    public final TableField<Record, Long> START_TS = createField(DSL.name("start_ts"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>zipkin.zipkin_spans.duration</code>.
     */
    public final TableField<Record, Long> DURATION = createField(DSL.name("duration"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>zipkin.zipkin_spans</code> table reference
     */
    public ZipkinSpans() {
        this(DSL.name("zipkin_spans"), null);
    }

    /**
     * Create an aliased <code>zipkin.zipkin_spans</code> table reference
     */
    public ZipkinSpans(String alias) {
        this(DSL.name(alias), ZIPKIN_SPANS);
    }

    /**
     * Create an aliased <code>zipkin.zipkin_spans</code> table reference
     */
    public ZipkinSpans(Name alias) {
        this(alias, ZIPKIN_SPANS);
    }

    private ZipkinSpans(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ZipkinSpans(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ZipkinSpans(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, ZIPKIN_SPANS);
    }

    @Override
    public Schema getSchema() {
        return Zipkin.ZIPKIN;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.ZIPKIN_SPANS_PKEY;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.ZIPKIN_SPANS_PKEY);
    }

    @Override
    public ZipkinSpans as(String alias) {
        return new ZipkinSpans(DSL.name(alias), this);
    }

    @Override
    public ZipkinSpans as(Name alias) {
        return new ZipkinSpans(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipkinSpans rename(String name) {
        return new ZipkinSpans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ZipkinSpans rename(Name name) {
        return new ZipkinSpans(name, null);
    }
}
