#!/bin/bash

set -v

# This hook is called with the current directory set to the same as the Dockerfile, so we go back
# to top level.
cd ..

IFS=',' read -ra TAGS <<< "$DOCKER_TAG"

# We always build zipkin-slim
echo Building zipkin-slim
docker build --build-arg version="$SOURCE_BRANCH" -f "$DOCKERFILE_PATH" -t "openzipkin/zipkin-slim:${TAGS[0]}" --target zipkin-slim .
for tag in ${TAGS[@]:1}; do
  docker tag "openzipkin/zipkin-slim:${TAGS[0]}" "openzipkin/zipkin-slim:$tag"
done

# We always build test images formerly hosted on openzipkin/docker-zipkin
# SOURCE_BRANCH contains the name of the branch or tag being built. Our build of the master branch
# ignores this argument, while our build of release tags uses it to fetch the right release artifact.

echo Building zipkin-ui
docker build --build-arg version="$SOURCE_BRANCH" -f "$DOCKERFILE_PATH" -t "openzipkin/zipkin-ui:${TAGS[0]}" --target zipkin-ui .
for tag in ${TAGS[@]:1}; do
  docker tag "openzipkin/zipkin-ui:${TAGS[0]}" "openzipkin/zipkin-ui:$tag"
done

echo Building zipkin-kafka
docker build --build-arg version="$SOURCE_BRANCH" -f "docker/kafka/Dockerfile"-t "openzipkin/zipkin-kafka:${TAGS[0]}" --target zipkin-kafka .
for tag in ${TAGS[@]:1}; do
  docker tag "openzipkin/zipkin-kafka:${TAGS[0]}" "openzipkin/zipkin-kafka:$tag"
done

# We also build storage images to correspond with the server version to keep schemas up to date
for storage in cassandra; do
  echo Building "$storage"
  docker build --build-arg version="$SOURCE_BRANCH" -f "docker/storage/${storage}/Dockerfile" -t "openzipkin/zipkin-${storage}:${TAGS[0]}" .
  for tag in ${TAGS[@]:1}; do
    docker tag "openzipkin/zipkin-${storage}:${TAGS[0]}" "openzipkin/zipkin-${storage}:$tag"
  done
done

if [[ "$DOCKER_TAG" == "master" ]]; then
  # We rebuild the builder image on master push, not on release pushes.
  echo Building zipkin-builder
  docker build -f "$DOCKERFILE_PATH" -t openzipkin/zipkin-builder --target zipkin-builder .
fi
