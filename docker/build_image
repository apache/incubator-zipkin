#!/bin/sh
#
# Copyright 2015-2020 The OpenZipkin Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
#

# This script is only a convenience as the build environment is controlled in
# the Dockerfile. That said, it uses only basic shell commands to help it work
# on developer laptops as well as CI nodes. Mainly, this centralizes the base
# Java image mappings and ensures all metadata needed is taken from pom.xml.
set -ue

TAG=${1:-openzipkin/zipkin:test}
OP=${2:-load}

TARGET=$(echo $TAG|sed -e 's~.*/\(.*\):.*~\1~g')
# When true, main images reuse zipkin-exec.jar and zipkin-slim.jar in the context root
RELEASE_FROM_CONTEXT=${RELEASE_FROM_CONTEXT:-false}
RELEASE_VERSION=${RELEASE_VERSION:-master}

# When publishing jars, we build with JDK 11 to ensure we can write 1.6 zipkin.jar for Brave.
# However, when creating Docker images, there's no such requirement.
# Hence, we use one version to keep the layer count manageable and centralized here.
JAVA_VERSION=${JAVA_VERSION:-15.0.1_p9}

# Arch of the running host. This determines which platform we load into Docker
ARCH=${ARCH:-$(uname -m)}
case ${ARCH} in
  x86_64* )
    ARCH=amd64
    ;;
  amd64* )
    ;;
  arm64* )
    ;;
  aarch64* )
    ARCH=arm64
    ;;
  * )
    echo ARCH ${ARCH} not yet supported in this script. export manually to amd64 or report issue.
    exit 1
esac

# Platform to load into "docker images"
PLATFORM=${PLATFORM:-linux/${ARCH}}
# Platforms to eventually push to the registry
PLATFORMS="linux/amd64,linux/arm64"

case ${TARGET} in
  zipkin )
    DOCKERFILE_PATH=docker/Dockerfile
    ;;
  zipkin-builder )
    DOCKERFILE_PATH=docker/builder/Dockerfile
    ;;
  zipkin-slim )
    DOCKERFILE_PATH=docker/Dockerfile
    ;;
  zipkin-ui )
    DOCKERFILE_PATH=docker/Dockerfile
    ;;
  zipkin-kafka )
    DOCKERFILE_PATH=docker/collector/kafka/Dockerfile
    ;;
  zipkin-cassandra )
    DOCKERFILE_PATH=docker/storage/cassandra/Dockerfile
    # Until Cassandra v4, we are stuck on JRE 8 for Cassandra
    JAVA_VERSION=8.252.09
    ;;
  zipkin-elasticsearch6 )
    DOCKERFILE_PATH=docker/storage/elasticsearch6/Dockerfile
    ;;
  zipkin-elasticsearch7 )
    DOCKERFILE_PATH=docker/storage/elasticsearch7/Dockerfile
    ;;
  zipkin-mysql )
    DOCKERFILE_PATH=docker/storage/mysql/Dockerfile
    ;;
  * )
    echo "Invalid TAG: ${TAG}, Ex. openzipkin/zipkin:test"
    exit 1
esac

BUILDX="docker buildx build --progress plain \
--build-arg release_version=${RELEASE_VERSION} --label zipkin-version=${RELEASE_VERSION} \
--build-arg release_from_context=${RELEASE_FROM_CONTEXT} \
--build-arg java_version=${JAVA_VERSION}"

case ${OP} in
  load )
    # We can only load with one platform/arch https://github.com/docker/buildx/issues/59
    echo "Building image ${TAG} with platform ${PLATFORM} and Java version ${JAVA_VERSION}"
    ${BUILDX} --target ${TARGET} --tag ${TAG} --platform=${PLATFORM} -f ${DOCKERFILE_PATH} . --load
    ;;
  push )
    echo "Pushing image ${TAG} with platforms ${PLATFORMS} and Java version ${JAVA_VERSION}"
    ${BUILDX} --target ${TARGET} --tag ${TAG} --platform=${PLATFORMS} -f ${DOCKERFILE_PATH} . --push
    ;;
  * )
    echo "Invalid OP: ${OP}, Ex. load or push"
    exit 1
esac
