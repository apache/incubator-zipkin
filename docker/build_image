#!/bin/sh
#
# Copyright 2015-2020 The OpenZipkin Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
#

# This script is only a convenience as the build environment is controlled in
# the Dockerfile. That said, it uses only basic shell commands to help it work
# on developer laptops as well as CI nodes. Mainly, this centralizes the base
# Java image mappings and ensures all metadata needed is taken from pom.xml.
set -ue

if ! test -f docker/Dockerfile; then
  echo Please execute this script from the repository root
  exit 1
fi

TAG=${1:-openzipkin/zipkin:test}
OP=${2:-load}

TARGET=$(echo $TAG|sed -e 's~.*/\(.*\):.*~\1~g')
# When true and building zipkin zipkin-slim or zipkin-ui, use zipkin-exec.jar and zipkin-slim.jar
# produced by a Maven build. This is implicitly true when a SNAPSHOT version.
ZIPKIN_FROM_MAVEN_BUILD=${ZIPKIN_FROM_MAVEN_BUILD:-false}
POM_VERSION=${POM_VERSION:-$(mvn help:evaluate -N -Dexpression=project.version -q -DforceStdout)}
ZIPKIN_VERSION=${ZIPKIN_VERSION:-${POM_VERSION}}

# When publishing jars, we build with JDK 11 to ensure we can write 1.6 zipkin.jar for Brave.
# However, when creating Docker images, there's no such requirement.
# Hence, we use one version to keep the layer count manageable and centralized here.
JAVA_VERSION=${JAVA_VERSION:-15.0.1_p9}

case ${TARGET} in
  zipkin )
    DOCKERFILE_PATH=docker/Dockerfile
    ;;
  zipkin-slim )
    DOCKERFILE_PATH=docker/Dockerfile
    ;;
  zipkin-ui )
    DOCKERFILE_PATH=docker/Dockerfile
    ;;
  zipkin-kafka )
    DOCKERFILE_PATH=docker/collector/kafka/Dockerfile
    ;;
  zipkin-cassandra )
    DOCKERFILE_PATH=docker/storage/cassandra/Dockerfile
    # Until Cassandra v4, we are stuck on JRE 8 for Cassandra
    JAVA_VERSION=8.252.09
    ;;
  zipkin-elasticsearch6 )
    DOCKERFILE_PATH=docker/storage/elasticsearch6/Dockerfile
    ;;
  zipkin-elasticsearch7 )
    DOCKERFILE_PATH=docker/storage/elasticsearch7/Dockerfile
    ;;
  zipkin-mysql )
    DOCKERFILE_PATH=docker/storage/mysql/Dockerfile
    ;;
  * )
    echo "Invalid TAG: ${TAG}, Ex. openzipkin/zipkin:test"
    exit 1
esac

# We don't currently release from a remote snapshot repository. When the version is snapshot, this
# is a local build or a pull request. Look to see if the files the build would produce are present.
# This allows skipping the build when an upstream step or stage has already produced them.
if [ ${DOCKERFILE_PATH} = docker/Dockerfile ]; then
  case ${ZIPKIN_VERSION} in
    *-SNAPSHOT )
      if [[ -f "zipkin-server/target/zipkin-server-${ZIPKIN_VERSION}-exec.jar" &&
            -f "zipkin-server/target/zipkin-server-${ZIPKIN_VERSION}-slim.jar" ]]; then
        echo Re-using Zipkin ${ZIPKIN_VERSION} binaries from a previous build...
      else
        if [ ${ZIPKIN_VERSION} != ${POM_VERSION} ]; then
          echo "To build Zipkin implicitly, set ZIPKIN_VERSION=${POM_VERSION}"
          exit 1
        fi

        echo Building Zipkin ${ZIPKIN_VERSION}...
        ./mvnw -T1C -q --batch-mode -DskipTests -Dlicense.skip=true --also-make -pl zipkin-server clean package
      fi
      ZIPKIN_FROM_MAVEN_BUILD=true
      ;;
  esac
fi

DOCKER_ARGS="-f ${DOCKERFILE_PATH} --target ${TARGET} --tag ${TAG} \
--build-arg zipkin_version=${ZIPKIN_VERSION} --label zipkin-version=${ZIPKIN_VERSION} \
--build-arg zipkin_from_maven_build=${ZIPKIN_FROM_MAVEN_BUILD} \
--build-arg java_version=${JAVA_VERSION} ."

# Avoid buildx for two reasons:
#  * It only supports one platform/arch on load https://github.com/docker/buildx/issues/59
#  * It would pull Docker Hub for moby/buildkit or multiarch/qemu-user-static images, using up quota
if [ "${OP}" = "load" ]; then
  echo "Building image ${TAG} with java_version ${JAVA_VERSION}"
  docker build ${DOCKER_ARGS}
  exit $?
fi

if [ "${OP}" != "push" ]; then
  echo "Invalid OP: ${OP}, Ex. load or push"
  exit 1
fi

# Platforms to eventually push to the registry
PLATFORMS="linux/amd64,linux/arm64"

# This can be less manual in the future, for example checking buildx to see what it can do.
ARCH=${ARCH:-$(uname -m)}
case ${ARCH} in
  x86_64* )
    ;;
  amd64* )
    ;;
  * )
    echo Pushing platforms ${PLATFORMS} with arch ${ARCH} is not yet supported.
    exit 1
esac

echo "Pushing image ${TAG} with platforms ${PLATFORMS} and Java version ${JAVA_VERSION}"
docker buildx build --progress plain --platform=${PLATFORMS} ${DOCKER_ARGS} --push
