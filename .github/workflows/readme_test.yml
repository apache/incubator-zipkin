# yamllint --format github .github/workflows/readme_test.yml
---
name: readme_test

# These test build commands mentioned in various README.md files.
#
# This doesn't literally scrape the README.md, so we don't test documentation-only commits.
on:
  # We run tests on non-tagged pushes to master that aren't a commit made by the release plugin
  push:
    tags: ''
    branches: master
    paths-ignore: '**/*.md'
  # We also run tests on pull requests targeted at the master branch.
  pull_request:
    branches: master
    paths-ignore: '**/*.md'

jobs:
  zipkin-server:
    name: zipkin-server/README.md ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: ubuntu
            os: ubuntu-20.04  # newest available distribution, aka focal
          - name: macos
            os: macos-latest
          - name: windows
            os: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 10
      # Remove apt repos that are known to break from time to time.
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Remove broken apt repos [ubuntu]
        if: matrix.name == 'ubuntu'
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
      # Setup latest JDK. We do this to ensure users don't need to use the same version as our
      # release process. Release uses JDK 11, the last version that can target 1.6 bytecode.
      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: 15
      - name: Cache NPM Packages
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-packages-${{ hashFiles('zipkin-lens/package-lock.json') }}
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Execute Server Build
        # command from zipkin-server/README.md
        run: ./mvnw -T1C -q --batch-mode -DskipTests --also-make -pl zipkin-server clean package
        shell: bash
        env:
          CI: true
      - name: upload zipkin-server-*.jar [ubuntu]
        uses: actions/upload-artifact@v2
        if: matrix.name == 'ubuntu'
        with:
          name: zipkin-server-jars
          if-no-files-found: error
          path: |
            zipkin-server/target/zipkin-server-*-exec.jar
            zipkin-server/target/zipkin-server-*-slim.jar
      - name: upload zipkin-lens-*.jar [ubuntu]
        uses: actions/upload-artifact@v2
        if: matrix.name == 'ubuntu'
        with:
          name: zipkin-lens-jar
          if-no-files-found: error
          path: zipkin-lens/target/zipkin-lens-*-SNAPSHOT.jar

  docker:
    name: ${{ matrix.readme }}
    needs: zipkin-server
    runs-on: ubuntu-20.04  # newest available distribution, aka focal
    strategy:
      matrix:
        include:
          - name: zipkin
            readme: docker/README.md
            env: DOCKER_TARGET=zipkin
          - name: zipkin-cassandra
            readme: docker/test-images/zipkin-cassandra/README.md
            env: DOCKER_FILE=docker/test-images/zipkin-cassandra/Dockerfile
          - name: zipkin-elasticsearch6
            readme: docker/test-images/zipkin-elasticsearch6/README.md
            env: DOCKER_FILE=docker/test-images/zipkin-elasticsearch6/Dockerfile
          - name: zipkin-elasticsearch7
            readme: docker/test-images/zipkin-elasticsearch7/README.md
            env: DOCKER_FILE=docker/test-images/zipkin-elasticsearch7/Dockerfile
          - name: zipkin-kafka
            readme: docker/test-images/zipkin-kafka/README.md
            env: DOCKER_FILE=docker/test-images/zipkin-kafka/Dockerfile
          - name: zipkin-mysql
            readme: docker/test-images/zipkin-mysql/README.md
            env: DOCKER_FILE=docker/test-images/zipkin-mysql/Dockerfile
          - name: zipkin-slim
            readme: docker/README.md
            env: DOCKER_TARGET=zipkin-slim
          - name: zipkin-ui
            readme: docker/test-images/zipkin-ui/README.md
            env: DOCKER_FILE=docker/test-images/zipkin-ui/Dockerfile
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v2
        with:
          name: zipkin-server-jars
          path: zipkin-server/target/
      - uses: actions/download-artifact@v2
        with:
          name: zipkin-lens-jar
          path: zipkin-lens/target/
      - name: Cache Docker
        uses: actions/cache@v2
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: ${{ runner.os }}-docker
      - name: Building and verifying openzipkin/${{ matrix.name }}:test
        run: |
          build-bin/docker/configure_docker &&
          ${{ matrix.env }} build-bin/docker/docker_build openzipkin/${{ matrix.name }}:test &&
          build-bin/docker/docker_test_image openzipkin/${{ matrix.name }}
        env:
          RELEASE_FROM_MAVEN_BUILD: true
